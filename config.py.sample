import os
basedir = os.path.abspath(os.path.dirname(__file__))


class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'nobody knows the password'
    PER_PAGE = 10

    SQLALCHEMY_COMMIT_ON_TEARDOWN = True
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SQLALCHEMY_RECORD_QUERIES = True

    FLASK_ADMIN_EMAIL = "codingcrush@163.com"

    IMAGE_UPLOAD_DIR = 'static/upload/'
    UPLOAD_FOLDER = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), 'app/static/upload/')

    MAIL_SERVER = 'smtp.163.com'
    MAIL_PORT = 994
    MAIL_USE_TLS = True
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')

    @staticmethod
    def init_app(app):
        pass

    DEPARTMENTS = (
        '人事部',
        '测试部',
    )

    PROJECTS = (
        '其他',
    )

    DEFAULT_CONTENT = "<p><strong>本周工作内容:</strong></p><ol><li></li></ol>" \
                      "<p>&nbsp;<strong>下周计划:</strong></p><ol><li></li></ol>"


class ProductionConfig(Config):
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = os.environ.get('PRD_DATABASE_URL') or \
        'postgresql://postgres:postgres@localhost/wr_prd'

    @classmethod
    def init_app(cls, app):
        super(ProductionConfig, cls).init_app(app)

        import logging
        gunicorn_error_handlers = logging.getLogger('gunicorn.error').handlers
        app.logger.handlers.extend(gunicorn_error_handlers)
        app.logger.setLevel(logging.DEBUG)

class DevelopmentConfig(Config):
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'wr_dev.sqlite')

    @classmethod
    def init_app(cls, app):
        super(DevelopmentConfig, cls).init_app(app)


config = {
    'default': ProductionConfig,
    'production': ProductionConfig,
    'development': DevelopmentConfig
}
